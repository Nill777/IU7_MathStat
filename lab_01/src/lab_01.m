clear all;
pkg load statistics

X = [8.00, 3.38,1.21,1.85,2.24,4.17,2.99,4.81,2.71,2.70,4.41,3.21,3.15,2.77,4.05,3.89,1.56,2.78,2.04,2.82,3.28,2.63,1.89,3.57,3.15,3.80,5.40,3.25,2.04,2.61,5.06,2.87,2.66,4.80,3.86,0.09,2.45,2.40,2.14,1.69,2.36,5.44,2.77,1.94,2.55,3.97,1.88,3.01,4.21,4.74,2.02,2.38,2.46,3.51,2.89,1.57,3.53,0.77,3.31,3.58,2.77,3.61,3.71,2.38,3.06,4.29,4.76,1.69,1.59,3.21,2.74,3.99,3.53,3.52,2.84,1.21,2.82,4.34,3.65,2.22,2.87,3.14,3.58,1.96,3.41,3.85,1.96,3.02,4.22,3.10,2.68,3.67,1.70,5.47,5.02,2.52,3.09,2.19,4.44,2.33,2.27,3.34,3.05,4.35,3.58,3.43,4.49,3.57,3.20,1.53,3.53,3.53,1.27,3.40,4.53,2.21,3.28,3.50,2.01,3.30,1.86]; 

% a) вычисление максимального значения Mmax и минимального значения Mmin;
Xmin = min(X);
Xmax = max(X);

% б) вычисление размаха R выборки;
R = range(X); %  Xmax - Xmin;

% в) вычисление оценок μ̂ и S² математического ожидания MX и дисперсии DX;
mu = mean(X); % sum(X) / n;
Ssquare = var(X); % var(X) = sum((Xi - mu)^2) / (n - 1);

% г) группировку значений выборки в m = [log2 n] + 2 интервала;
% floor(X) rounds each element of X to the nearest integer less than or equal to that element.
m = floor(log2(length(X))) + 2;
% [counts, centers] = hist(x, m)
[y1, x1] = hist(X, m); % y1 - кол-во попаданий, x1 - центр интервала

fprintf('Минимальное значение выборки: %.3f\n', Xmin);
fprintf('Максимальное значение выборки: %.3f\n', Xmax);
fprintf('Размах выборки: %.3f\n', R);
fprintf('Выборочное математическое ожидание: %.3f\n', mu);
fprintf('Выборочная дисперсия: %.3f\n', Ssquare);

fprintf('┌────┬────────────────┬───────────┐\n');
fprintf('│ %-5s│ %-23s│ %-19s│\n', '№', 'интервал', 'попаданий');
fprintf('├────┼────────────────┼───────────┤\n');
half_width = R / (2 * m);
for i = 1 : length(x1)
    l = x1(i) - half_width;
    r = x1(i) + half_width;
    if (i != length(x1))
        fprintf('│%2d) │ [%.3f; %.3f%c │ %10d│\n', i, l, r, ")", y1(i));
    else
        fprintf('│%2d) │ [%.3f; %.3f%c │ %10d│\n', i, l, r, "]", y1(i));
    end    
end
fprintf('└────┴────────────────┴───────────┘\n');

% д) построение на одной координатной плоскости гистограммы
% и графика функции плотности распределения вероятностей нормальной случайной величины
% с математическим ожиданием μ̂ и дисперсией S²;
k = 4;
% p = normcdf(k) - normcdf(-k); % вероятность того, что случайная величина X попадет в интервал
% printf("μ-kσ≤X≤μ+kσ = %d\n", p);
% сетка на оси абсцисс для нормального распределения
Xsigma = sqrt(Ssquare); % σ
n_points = 1000;
x = linspace(mu - k*Xsigma, mu + k*Xsigma, n_points);
% вычисление функции плотности распределения вероятностей для нормального распределения
f = normpdf(x, mu, Xsigma);

% нормирование интервалов 
% (преобразуем частоты в плотность вероятности, чтобы площадь гистограммы была равна 1)
norm_y1 = y1 / (sum(y1) * (x1(2) - x1(1))); % y1 / (len(X) * h)

figure('Name', 'Функция плотности распределения вероятностей')
bar(x1, norm_y1, 1);
hold on;
plot(x, f, 'LineWidth', 2, 'color', 'red');
xlabel('Значения выборки');
ylabel('Плотность');
legend('Гистограмма', 'График', 'Location', 'southeast');
hold off;

% е) построение на другой координатной плоскости графика эмпирической функции распределения
% и функции распределения нормальной случайной величины с математическим
% ожиданием μ̂ и дисперсией S².

% вычисление функции распределения вероятностей для нормального распределения
F = normcdf(x, mu, Xsigma);
% вычисление эмпирической функции распределения
[F_emp, x_emp] = ecdf(X);

figure('Name', 'Функции распределения вероятностей')
stairs(x_emp, F_emp, 'LineWidth', 2); 
hold on;
plot(x, F, 'LineWidth', 1, 'color', 'red'); 
xlabel('Значения выборки');
ylabel('Вероятность');
legend('Эмпирическая', 'N(\mu, \sigma^2)', 'Location', 'southeast');
hold off;

